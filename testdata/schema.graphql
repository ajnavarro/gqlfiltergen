
scalar Time

type TypeOne {
  type_one_string_field_filtered: String! @filterable
  type_one_string_field_filtered_not_mandatory: String @filterable
  type_one_number_field_filtered: Int! @filterable(extras:[MINMAX])
  type_one_string_slice_filtered: [String!] @filterable

  type_one_number_field_filtered_not_mandatory: Int @filterable
  type_one_time_field_filtered: Time! @filterable
  type_one_time_field_filtered_not_mandatory: Time @filterable
  type_one_boolean_field_filtered: Boolean! @filterable
  type_one_boolean_field_filtered_not_mandatory: Boolean @filterable

  type_one_string_field_with_no_filter: String!
  type_one_number_field_with_no_filter: Int!
  type_one_time_field_with_no_filter: Time!

  type_one_slice_with_type_twos: [TypeTwo]! @filterable
}

type TypeTwo {
  type_two_string_field_filtered: String! @filterable
  type_two_number_field_filtered: Int! @filterable
  type_two_time_field_filtered: Time! @filterable
  type_two_boolean_field_filtered: Boolean! @filterable

  type_twoString_field_with_no_filter: String!
  type_twoNumber_field_with_no_filter: Int!
  type_twoTime_field_with_no_filter: Time!

  type_two_slice_with_type_twos: [TypeTwo]! @filterable

  type_two_with_type_three: TypeThree! @filterable
  type_two_with_type_three_not_mandatory: TypeThree @filterable

}

type TypeThree {
  type_three_string_field_filtered: String! @filterable
  type_three_number_field_filtered: Int! @filterable
  type_three_time_field_filtered: Time! @filterable
  type_three_boolean_field_filtered: Boolean! @filterable

  type_three_string_field_with_no_filter: String!
  type_three_number_field_with_no_filter: Int!
  type_three_time_field_with_no_filter: Time!

  type_union: UnionOne! @filterable
  type_union_slice: [UnionOne!] @filterable
  type_union_not_mandatory: UnionOne @filterable
}

union UnionOne = UnionTypeOne | UnionTypeTwo | UnionTypeTwoPrime

type UnionTypeOne {
  type_int_union_one: Int @filterable
  type_string_union_one: String @filterable
  type_time_union_one: Time @filterable
}

type UnionTypeTwo {
  type_int_union_two: Int @filterable
  type_string_union_two: String @filterable
  type_time_union_two: Time @filterable
  type_string_slice_union_two: [String!] @filterable
}

type UnionTypeTwoPrime {
  type_int_union_two_prime: Int
  type_string_union_two_prime: String 
  type_time_union_two_prime: Time 
}

union UnionTwo = UnionTypeThree | UnionTypeFour

type UnionTypeThree {
  type_int_union_one: Int 
  type_string_union_one: String 
  type_time_union_one: Time 
}

type UnionTypeFour {
  type_int_union_two: Int 
  type_string_union_two: String 
  type_time_union_two: Time 
}

type ExternalType {
  number_one: Int! @filterable
  number_two: Int! @filterable
  number_three: Int! @filterable
  number_four: Int @filterable
  number_five: Int @filterable
  
  number_list: [Int!] @filterable

  type_one: TypeOne @filterable
}

input InputOne {
  type_two_string_field_filtered: String!
  type_two_number_field_filtered: Int! 
  type_two_time_field_filtered: Time! 
  type_two_boolean_field_filtered: Boolean!
  type_twoString_field_with_no_filter: String!
  type_twoNumber_field_with_no_filter: Int!
  type_twoTime_field_with_no_filter: Time!
}

type Query {
  testQuery(filter: String!): [Int!]
  testQueryObject(filter: InputOne!): [TypeTwo!]
}