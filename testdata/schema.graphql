
scalar Time

type TypeOne {
  typeOneStringFieldFiltered: String! @filterable
  typeOneStringFieldFilteredNotMandatory: String @filterable
  typeOneNumberFieldFiltered: Int! @filterable
  typeOneNumberFieldFilteredNotMandatory: Int @filterable
  typeOneTimeFieldFiltered: Time! @filterable
  typeOneTimeFieldFilteredNotMandatory: Time @filterable
  typeOneBooleanFiltered: Boolean! @filterable
  typeOneBooleanFilteredNotMandatory: Boolean @filterable

  typeOneStringFieldWithNoFilter: String!
  typeOneNumberFieldWithNoFilter: Int!
  typeOneTimeFieldWithNoFilter: Time!

  typeOneSliceWithTypeTwos: [TypeTwo]! @filterable
}

type TypeTwo {
  typeTwoStringFieldFiltered: String! @filterable
  typeTwoNumberFieldFiltered: Int! @filterable
  typeTwoTimeFieldFiltered: Time! @filterable
  typeTwoBooleanFiltered: Boolean! @filterable

  typeTwoStringFieldWithNoFilter: String!
  typeTwoNumberFieldWithNoFilter: Int!
  typeTwoTimeFieldWithNoFilter: Time!

  typeTwoSliceWithTypeTwos: [TypeTwo]! @filterable

  typeTwoWithTypeThree: TypeThree! @filterable
  typeTwoWithTypeThreeNotMandatory: TypeThree @filterable

}

type TypeThree {
  typeThreeStringFieldFiltered: String! @filterable
  typeThreeNumberFieldFiltered: Int! @filterable
  typeThreeTimeFieldFiltered: Time! @filterable
  typeThreeBooleanFiltered: Boolean! @filterable

  typeThreeStringFieldWithNoFilter: String!
  typeThreeNumberFieldWithNoFilter: Int!
  typeThreeTimeFieldWithNoFilter: Time!
}

type ExternalType {
  numberOne: Int! @filterable
  numberTwo: Int! @filterable
  numberThree: Int! @filterable
  numberFour: Int @filterable
  numberFive: Int @filterable
  
  numberList: [Int!] @filterable

  typeOne: TypeOne @filterable
}